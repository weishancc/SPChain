const IPFS = require('ipfs');
const OrbitDB = require('orbit-db');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs').promises;
const yargs = require('yargs');

/*--------------------------------------------------*/
/*                 Sample Usage                     */
/*--------------------------------------------------*/

// console.log('-- Usage: node setup.js create $username');
// console.log('-- Usage: node setup.js upload $data (e.g,, '{ "imagePath": "amber-mosaic.jpg", "name": "amber", "desc": "generated by GAN", "price": "10000" }')');
// console.log('-- Usage: node setup.js transfer $data (e.g,, '{ "tokenID": "xxxx-xxxx-xxxx-xxxx", "collector": "amber", "owner": "koma" }')');

/*--------------------------------------------------*/

async function main() {
  // yargs helper
  const argv = yargs
    .command('create', 'Create a new orbitdb', {
      name: {
        describe: 'Name of orbitdb',
        alias: 'n',
        demandOption: true,
      }
    })
    .command('upload', 'Upload artworks to orbitdb', {
      artwork: {
        describe: 'Payload of artwork',
        alias: 'a',
        demandOption: true,
      },
      dbName: {
        describe: 'Name of uploaded orbitdb',
        alias: 'd',
        demandOption: true,
      }
    })
    .command('transter', 'Trasfer artwork', {
      tokenID: {
        describe: 'UUID of artwork',
        alias: 't',
        demandOption: true,
      },
      collector: {
        describe: 'Collector',
        alias: 'c',
        demandOption: true,
      },
      owner: {
        describe: 'owner',
        alias: 'o',
        demandOption: true,
      }
    })
    .help()
    .alias('help', 'h').argv;

  var db;

  // Create IPFS instance
  const ipfsOptions = { repo: './ipfs', };
  const ipfs = await IPFS.create(ipfsOptions);

  // Create OrbitDB instance
  const orbitdb = await OrbitDB.createInstance(ipfs);

  if (argv._[0] == "create") {
    // Create a new docs db
    db = await orbitdb.docs(argv.name, { indexBy: 'name' });

    // Write hash address to file
    try {
      const image = await fs.appendFile('./address.txt', argv.name + ' ' + db.address.toString() + ' ');
      console.log('\n-- ' + argv.name + ' created --');
      console.log('-- DB address: ' + db.address.toString());
    } catch (error) {
      console.log(error);
    }

  } else if (argv._[0] == "upload") {
    try {
      // Read hash address of username from file
      const allAddress = await fs.readFile('./address.txt', 'utf8');
      const addressArray = allAddress.split(' ');
      const isAddress = (element) => element == argv.dbName;

      // Open existed DB and put data
      db = await orbitdb.open(addressArray[addressArray.findIndex(isAddress) + 1]);
      await db.load();

      // Parse JSON fortmat artwork data to js object
      var artData = JSON.parse(argv.artwork);

      // Read the image and save its string into db
      const image = await fs.readFile(artData.imagePath);
      var hash = await db.put({ _id: uuidv4(), artwork: image, name: artData.name, desc: artData.desc, price: artData.price, role: 'creator' });
      console.log('\n-- Store ' + hash + ' successfully \n');

    } catch (error) {
      console.log(error);
    }


    /* ---------------------------------------- */

    // Check all the artwork
    const allArtwork = db.get('');

    console.log('--List all artwork');
    console.log(allArtwork);

    // Disconnect with db and exit successfully
    await db.close();
    await orbitdb.disconnect();
    process.exit(0);
  }
}

main();
